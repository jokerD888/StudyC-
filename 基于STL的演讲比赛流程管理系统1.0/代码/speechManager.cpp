#include"speechManager.h"
//构造
SpeechManager::SpeechManager()
{
	this->InitSpeech();

	this->CreateSpeaker();

	this->LoadRecord();
}

//析构
SpeechManager::~SpeechManager()
{
	//空实现即可
}

//菜单
void SpeechManager::Menu()
{
	cout << "********************************************" << endl;
	cout << "*************  欢迎参加演讲比赛 ************" << endl;
	cout << "*************  1.开始演讲比赛  *************" << endl;
	cout << "*************  2.查看往届记录  *************" << endl;
	cout << "*************  3.清空比赛记录  *************" << endl;
	cout << "*************  0.退出比赛程序  *************" << endl;
	cout << "********************************************" << endl;
	cout << endl;
}


//退出系统
void SpeechManager::ExitSystem()
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}


//初始化容器和属性
void SpeechManager::InitSpeech()
{
	//容器保证为空
	this->v1.clear();
	this->v2.clear();
	this->vVictory.clear();
	this->m_Speaker.clear();

	//初始化比赛轮数
	this->m_Index = 1;

	this->m_Record.clear();
}

//初始化创建12名选手
void SpeechManager::CreateSpeaker()
{
	string nameSeed = "ABCDEFGHIJKL";
	for (int i = 0; i < nameSeed.size(); i++)
	{
		string name = "选手";
		name += nameSeed[i];

		//创建具体选手
		Speaker sp;
		sp.m_Name = name;
		for (int j = 0; j < 2; j++)
		{
			sp.m_Score[j] = 0;
		}

		//12名选手编号
		this->v1.push_back(i + 10001);

		//选手编号 以及对应的选手 存放到map容器中
		this->m_Speaker.insert(make_pair(i + 10001, sp));
	}
}

//开始比赛 - 比赛流程控制
void SpeechManager::StartSpeech()
{
	//第一轮比赛
	
	//1、抽签
	this->SpeechDraw();

	//2、比赛
	this->SpeechContest();

	//3、显示晋级结果
	this->ShowScore();

	//第二轮比赛
	this->m_Index++;

	//1、抽签
	this->SpeechDraw();

	//2、比赛
	this->SpeechContest();

	//3、显示最终结果
	this->ShowScore();

	//4、保存分数
	this->SaveRecord();

	this->InitSpeech();
	this->CreateSpeaker();
	this->LoadRecord();

	cout << "本届比赛完毕！" << endl;
	system("pause");
	system("cls");
}


//抽签
void SpeechManager::SpeechDraw()
{
	cout << "第 << " << this->m_Index << " >> 轮比赛选手正在抽签" << endl;
	cout << "---------------------" << endl;
	cout << "抽签后演讲顺序如下：" << endl;
	if (this->m_Index == 1)
	{
		random_shuffle(v1.begin(), v1.end()); 
		for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	else
	{
		random_shuffle(v2.begin(), v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	cout << "---------------------" << endl;

	system("pause");
	cout << endl;
}


//比赛
void SpeechManager::SpeechContest()
{
	cout << "----------------------第" << this->m_Index << "轮比赛开始-----------------------" << endl;
	//临时容器，存放小组成绩
	multimap<double, int, greater<double>> GroupScore;
	int num = 0;//记录人员个数，6人一组

	vector<int> vSrc;//比赛选手容器
	if (this->m_Index == 1)
	{
		vSrc = this->v1;
	}
	else
	{
		vSrc = this->v2;
	}

	//遍历所有选手进行比赛
	for (vector<int>::iterator it = vSrc.begin(); it != vSrc.end(); it++)
	{
		num++;
		//评委打分
		deque<double> d;
		//10个评委
		for (int i = 0; i < 10;i++)
		{
			double score = (rand() % 401 + 600) / 10.f;//60.0~100
			//cout << score << " ";//测试
			d.push_back(score);
		}
		//cout << endl;

		//排序
		sort(d.begin(), d.end(), greater<double>());
		d.pop_back();//去最低分
		d.pop_front();//去最高分

		double sum = accumulate(d.begin(), d.end(), 0.0f);
		double avg = sum / (double)d.size();
		//打印平均分测试
		//cout << "编号：" << *it << "\t姓名：" << this->m_Speaker[*it].m_Name << "\t获取平均分：" << avg << endl;

		//将平均分放入到map容器
		this->m_Speaker[*it].m_Score[this->m_Index - 1] = avg;

		//将打分数据放到临时小组容器中
		GroupScore.insert(make_pair(avg, *it));//key是得分，value是选手编号
		//每6人取出前3名
		if (num % 6 == 0)
		{
			cout << "第" << num / 6 << "小组比赛名次：" << endl;
			for (multimap<double, int, greater<double>>::iterator it = GroupScore.begin(); it != GroupScore.end(); it++)
			{
				cout << "编号：" << it->second << "\t姓名：" << this->m_Speaker[it->second].m_Name
					<< "\t成绩：" << this->m_Speaker[it->second].m_Score[this->m_Index - 1] << endl;
			}
			cout << endl;
			//取前三晋级
			int count = 0;
			for (multimap<double, int, greater<double>>::iterator it = GroupScore.begin(); it != GroupScore.end() && count<3; it++)
			{
				count++;
				if (this->m_Index == 1)
				{
					v2.push_back((*it).second);
				}
				else
				{
					vVictory.push_back((*it).second);
				}
			}
			GroupScore.clear();//小组容器清空，放下一组
		}

	}
	cout << "------------------------第" << this->m_Index << "轮比赛完毕------------------------" << endl;

	system("pause");
}




//显示比赛结果
void SpeechManager::ShowScore()
{
	cout << "-------------------第" << this->m_Index << "轮晋级选手信息如下：--------------------" << endl;
	vector<int> v;
	if (this->m_Index == 1)
	{
		v = v2;
	}
	else
	{
		v = vVictory;
	}

	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "选手编号：" << *it << " 姓名： " << m_Speaker[*it].m_Name << " 得分： " << m_Speaker[*it].m_Score[this->m_Index - 1] << endl;
	}
	cout << endl;

	system("pause");
	system("cls");
	this->Menu();
}

//保存记录
void SpeechManager::SaveRecord()
{
	ofstream ofs;
	ofs.open("speech.csv", ios::out | ios::app); // 用输出的方式打开文件  -- 写文件

	//将每个人数据写入到文件中
	for (vector<int>::iterator it = vVictory.begin(); it != vVictory.end(); it++)
	{
		ofs << *it << ","
			<< m_Speaker[*it].m_Score[1] << ",";
	}
	ofs << endl;

	//关闭文件
	ofs.close();

	cout << "记录已经保存" << endl;
	//文件不为空了
	this->fileIsEmpty = false;
}


void SpeechManager::LoadRecord()
{
	ifstream ifs("speech.csv", ios::in); //输入流对象 读取文件

	if (!ifs.is_open())
	{
		this->fileIsEmpty = true;
		//cout << "文件不存在！" << endl;
		ifs.close();
		return;
	}

	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		//cout << "文件为空!" << endl;
		this->fileIsEmpty = true;
		ifs.close();
		return;
	}

	//文件不为空
	this->fileIsEmpty = false;

	ifs.putback(ch); //读取的单个字符放回去

	string data;
	int index = 0;
	while (ifs >> data)
	{
		//cout << data << endl;
		vector<string>v;

		int pos = -1;
		int start = 0;

		while (true)
		{
			pos = data.find(",", start); //从0开始查找 ','
			if (pos == -1)
			{
				break; //找不到break返回
			}
			string tmp = data.substr(start, pos - start); //找到了,进行分割 参数1 起始位置，参数2 截取长度
			v.push_back(tmp);
			start = pos + 1;
		}

		this->m_Record.insert(make_pair(index, v));
		index++;
	}

	ifs.close();
}


//显示往届得分
void SpeechManager::ShowRecord()
{
	if (this->fileIsEmpty)
	{
		cout << "文件不存在，或数据为空！" << endl;
	}
	else
	{
		for (int i = 0; i < this->m_Record.size(); i++)
		{
			cout << "第" << i + 1 << "届 " <<
				"冠军编号：" << this->m_Record[i][0] << " 得分：" << this->m_Record[i][1] << " "
				"亚军编号：" << this->m_Record[i][2] << " 得分：" << this->m_Record[i][3] << " "
				"季军编号：" << this->m_Record[i][4] << " 得分：" << this->m_Record[i][5] << endl;
		}
	}
	system("pause");
	system("cls");
}

//清空记录
void SpeechManager::ClearRecord()
{
	cout << "确认清空？" << endl;
	cout << "1、确认" << endl;
	cout << "2、返回" << endl;

	int select = 0;
	cin >> select;

	if (select == 1)
	{
		//打开模式 ios::trunc 如果存在删除文件并重新创建
		ofstream ofs("speech.csv", ios::trunc);
		ofs.close();

		//初始化属性
		this->InitSpeech();

		//创建选手
		this->CreateSpeaker();

		//获取往届记录
		this->LoadRecord();


		cout << "清空成功！" << endl;
	}

	system("pause");
	system("cls");
}

