#define _CRT_SECURE_NO_WARNINGS 1

#include<iostream>
using namespace std;

//函数原型：
//两端插入操作：
//push_front(elem);        //在容器头部插入一个数据
//pop_back();                  //删除容器最后一个数据
//pop_front();               //删除容器第一个数据
//
//指定位置操作：
//insert(pos, elem);          //在pos位置插入一个elem元素的拷贝，返回插入数据的位置。
//insert(pos, n, elem);      //在pos位置插入n个elem数据，无返回值。
//insert(pos, beg, end);    //在pos位置插入[beg,end)区间的数据，无返回值。注意：左闭右开
//clear();                            //清空容器的所有数据
//erase(beg, end);             //删除[beg,end)区间的数据，返回下一个数据的位置。注意：左闭右开
//erase(pos);                   //删除pos位置的数据，返回下一个数据的位置。

#include <deque>

void printDeque(const deque<int>& d)
{
	for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {
		cout << *it << " ";

	}
	cout << endl;
}
//两端操作
void test01()
{
	deque<int> d;
	//尾插
	d.push_back(10);
	d.push_back(20);
	//头插
	d.push_front(100);
	d.push_front(200);

	printDeque(d);

	//尾删
	d.pop_back();
	//头删
	d.pop_front();
	printDeque(d);
}

//插入
void test02()
{
	deque<int> d;
	d.push_back(10);
	d.push_back(20);
	d.push_front(100);
	d.push_front(200);
	printDeque(d);

	d.insert(d.begin(), 1000);
	printDeque(d);

	d.insert(d.begin(), 2, 10000);
	printDeque(d);

	deque<int>d2;
	d2.push_back(1);
	d2.push_back(2);
	d2.push_back(3);

	d.insert(d.begin(), d2.begin(), d2.end());
	printDeque(d);

}

//删除
void test03()
{
	deque<int> d;
	d.push_back(10);
	d.push_back(20);
	d.push_front(100);
	d.push_front(200);
	printDeque(d);

	d.erase(d.begin());
	printDeque(d);

	d.erase(d.begin(), d.end());
	d.clear();
	printDeque(d);
}
void test04()
{
	deque<int> d;
	d.push_back(30);
	d.push_back(40);
	d.push_front(20);
	d.push_front(10);

	d.insert(d.insert(d.begin() += 2, 15), 14); //此函数的返回值返回新插入数据的位置。
	printDeque(d);

	d.erase(d.erase(d.begin() += 2, d.begin() += 3));//删除2到3区间（左闭右开）的数据后再根据返回值删除下一个
	printDeque(d);
}
int main() 
{

	//test01();
	//test02();

	//test03();
	test04();
	return 0;
}

