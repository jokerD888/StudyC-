#define _CRT_SECURE_NO_WARNINGS 1

#include<iostream>
using namespace std;

//功能描述：
//查找指定元素是否存在，有序条件下,默认升序
//函数原型
//bool binary_search(iterator beg, iterator end, value); 


// 查找指定的元素，查到 返回true  否则false
// 注意: 在无序序列中不可用
// beg 开始迭代器
// end 结束迭代器
// value 查找的元素


#include <algorithm>
#include <vector>
#include<functional>
//默认升序条件下
void MyPrint(int val)
{
	cout << val << " ";
}
void test01()
{
	//设置一个升序数据
	vector<int> v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}
	for_each(v.begin(), v.end(), MyPrint);
	cout << endl;

	//二分查找
	bool ret = binary_search(v.begin(), v.end(), 3);
	if (ret)
	{
		cout << "找到了" << endl;
	}
	else
	{
		cout << "未找到" << endl;
	}
}

//------------------降序条件下--------------------
//降序的排序规则可以有三种定义方法：普通函数，函数对象，内置函数对象
//普通函数
bool MySort01(const int a,const int b)
{
	return a > b;
}
class MySort02
{
public:
	bool operator()(const int a, const int b)
	{
		return a > b;
	}
};
void test02()
{
	vector<int> v;

	for (int i = 0; i < 10; i++)
	{
		v.push_back(9-i);
	}
	for_each(v.begin(), v.end(), MyPrint);
	cout << endl;

	int ret = binary_search(v.begin(), v.end(),6 , MySort01);//普通函数
	//int ret = binary_search(v.begin(), v.end(), 6, MySort02());//函数对象
	//int ret = binary_search(v.begin(), v.end(), 6, greater<int>());//内置函数对象

	if (ret)
	{
		cout << "找到了" << endl;
	}
	else
	{
		cout << "未找到" << endl;
	}

}

int main() 
{
	test01();
	test02();
	return 0;
}

